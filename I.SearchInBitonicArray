#include<bits/stdc++.h>
using namespace std;
int ascendingBS(vector<int> &arr,int x,int l,int h){
    int n = arr.size();
    while(l<=h){
        int mid = l + (h-l)/2;
        if(arr[mid]==x){
            return mid;
            break;
        }else if(arr[mid]>x){
            h = mid-1;
        }else{
            l = mid+1;
        }
    }
    return -1;
}

int descendingBS(vector<int> &arr,int x,int l,int h){
    int n = arr.size();
    while(l<=h){
        int mid = l + (h-l)/2;
        if(arr[mid]==x){
            return mid;
            break;
        }else if(arr[mid]>x){
            l = mid+1;
        }else{
            h = mid-1;
        }
    }
    return -1;
}
int peakElementId(vector<int> &arr){
    int n = arr.size();
    int l =0,h=n-1;
    while(l<=h){
        int mid = l +(h-l)/2;
        
        if(mid>0 && mid<n-1){
            if(arr[mid]>arr[mid-1] && arr[mid]>arr[mid+1])return mid;
            else if(arr[mid]>arr[mid-1])l = mid+1;
            else   h = mid-1;
        }else if(mid==0){
            if(arr[0]>arr[1])return mid;
            else mid+1;
        }else if(mid==n-1){
            if(arr[mid-1]>arr[mid])return mid-1;
            else mid;
        }
    }
    return -1;
}

int searchInBitonic(vector<int> &arr,int x){
    int n = arr.size();
    int peak = peakElementId(arr);
    int first = ascendingBS(arr,x,0,peak-1);
    int second = descendingBS(arr,x,peak,n-1);
    return max(first,second);

}
int main(){
    vector<int> arr = {2,3,10,15,9,8,7};  // Bitonic Array: Strictly increasing and then strictly decreasing
    int x = 8;
    cout<<searchInBitonic(arr,x);
    return 0;
}
