#include<bits/stdc++.h>
using namespace std;

int minElement(vector<int> &arr){ //Also for finding the number of times sorted array is rotated
    int n = arr.size();
    int l = 0,h = n-1;
    int ans;
    while(l<=h){
        int mid =l+ (h-l)/2;
        int prev = (mid-1+n)%n;
        int next = (mid+1)%n;
        if(arr[mid]<=arr[prev] && arr[mid]<=arr[next]){
            return mid;
        }
        if(arr[mid]>=arr[l]){
            l = mid+1;
        }else if(arr[mid]<=arr[h]){
            h = mid-1;
        }
    }
}

int bs(vector<int> &arr,int x,int l,int h){ //Normal binary search function
    while(l<=h){
        int mid = l +(h-l)/2;
        if(arr[mid]==x)return mid;
        else if(arr[mid]<=x){
            l = mid+1;
        }else{
            h = mid-1;
        }
    }
    return -1;
}

int main(){
    vector<int> arr = {11,12,13,1,3,4,5,6,7,8};
    int n = arr.size();
    int x = 12;
    int id = minElement(arr);
    int ans;
    if(arr[id]==x){
        ans = id;
    }
    int first = bs(arr,x,0,id-1);
    int second = bs(arr,x,id+1,n-1);

    if(first==-1 && second==-1)cout<<"Not found"<<endl;
    cout<<max(first,second); // one of them will be -1.
    return 0;
}
